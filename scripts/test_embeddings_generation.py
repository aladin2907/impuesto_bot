#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ embeddings
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 100 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
"""

import os
import sys
import json
from pathlib import Path

project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from app.services.elasticsearch.elasticsearch_service import ElasticsearchService
from app.services.llm.llm_service import LLMService
import requests

def test_embeddings():
    print("üß™ –¢–ï–°–¢ –ì–ï–ù–ï–†–ê–¶–ò–ò EMBEDDINGS")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    es_service = ElasticsearchService()
    llm_service = LLMService()
    
    if not llm_service.initialize():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å LLM")
        return
    
    print(f"‚úÖ LLM –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {llm_service.provider}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ 3 –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
    index_name = "telegram_threads"
    text_field = "content"
    embedding_field = "content_embedding"
    
    # –ü–æ–ª—É—á–∞–µ–º 3 –¥–æ–∫—É–º–µ–Ω—Ç–∞
    search_url = f"{es_service.base_url}/{index_name}/_search"
    search_body = {
        "query": {"match_all": {}},
        "_source": [text_field],
        "size": 3
    }
    
    response = requests.post(search_url, headers=es_service.headers, json=search_body, timeout=30)
    hits = response.json()['hits']['hits']
    
    print(f"\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ {len(hits)} –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö...")
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç—ã
    texts = []
    doc_ids = []
    for hit in hits:
        text = hit['_source'].get(text_field, '')
        if text:
            texts.append(text[:8000])
            doc_ids.append(hit['_id'])
            print(f"\n–î–æ–∫—É–º–µ–Ω—Ç {hit['_id']}:")
            print(f"  –¢–µ–∫—Å—Ç: {text[:100]}...")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º embeddings
    print(f"\nüîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è embeddings –¥–ª—è {len(texts)} —Ç–µ–∫—Å—Ç–æ–≤...")
    embeddings = llm_service.generate_embeddings_batch(texts)
    
    if embeddings:
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(embeddings)} embeddings")
        print(f"   –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {len(embeddings[0])}")
        print(f"   –ü–µ—Ä–≤—ã–µ 5 –∑–Ω–∞—á–µ–Ω–∏–π: {embeddings[0][:5]}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
        print(f"\nüì§ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ Elasticsearch...")
        bulk_url = f"{es_service.base_url}/_bulk"
        bulk_lines = []
        for doc_id, embedding in zip(doc_ids, embeddings):
            bulk_lines.append(json.dumps({"update": {"_id": doc_id, "_index": index_name}}))
            bulk_lines.append(json.dumps({"doc": {embedding_field: embedding}}))
        
        bulk_body = "\n".join(bulk_lines) + "\n"
        headers = es_service.headers.copy()
        headers["Content-Type"] = "application/x-ndjson"
        
        bulk_response = requests.post(bulk_url, headers=headers, data=bulk_body, timeout=60)
        
        if bulk_response.status_code == 200:
            print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ embeddings —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
            print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö embeddings...")
            for doc_id in doc_ids:
                get_url = f"{es_service.base_url}/{index_name}/_doc/{doc_id}"
                get_response = requests.get(get_url, headers=es_service.headers, timeout=10)
                doc = get_response.json()['_source']
                
                if embedding_field in doc:
                    print(f"  ‚úÖ {doc_id}: embedding –µ—Å—Ç—å (dims: {len(doc[embedding_field])})")
                else:
                    print(f"  ‚ùå {doc_id}: embedding –ù–ï–¢")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ bulk update: {bulk_response.status_code}")
            print(bulk_response.text[:500])
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å embeddings")

if __name__ == "__main__":
    test_embeddings()

