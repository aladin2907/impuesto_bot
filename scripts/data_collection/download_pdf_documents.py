#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–∑–∞–∫–æ–Ω—ã, —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã)
"""

import json
import requests
import hashlib
from datetime import datetime
from typing import List, Dict
from pathlib import Path


class PDFDownloader:
    def __init__(self):
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'
        }
        
        # –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        self.documents = [
            {
                "document_title": "Ley 35/2006 IRPF - Impuesto sobre la Renta de las Personas F√≠sicas",
                "document_type": "law",
                "document_number": "Ley 35/2006",
                "source_url": "https://www.boe.es/buscar/pdf/2006/BOE-A-2006-20764-consolidado.pdf",
                "categories": ["irpf", "renta", "autonomos"],
                "description": "Ley del Impuesto sobre la Renta de las Personas F√≠sicas",
                "region": "national",
                "language": "es"
            },
            {
                "document_title": "Ley 37/1992 IVA - Impuesto sobre el Valor A√±adido",
                "document_type": "law",
                "document_number": "Ley 37/1992",
                "source_url": "https://www.boe.es/buscar/pdf/1992/BOE-A-1992-28740-consolidado.pdf",
                "categories": ["iva", "impuesto_indirecto"],
                "description": "Ley del Impuesto sobre el Valor A√±adido",
                "region": "national",
                "language": "es"
            },
            {
                "document_title": "Real Decreto 439/2007 Reglamento IRPF",
                "document_type": "regulation",
                "document_number": "RD 439/2007",
                "source_url": "https://www.boe.es/buscar/pdf/2007/BOE-A-2007-7648-consolidado.pdf",
                "categories": ["irpf", "reglamento"],
                "description": "Reglamento del Impuesto sobre la Renta de las Personas F√≠sicas",
                "region": "national",
                "language": "es"
            },
            {
                "document_title": "Ley 27/2014 Impuesto sobre Sociedades",
                "document_type": "law",
                "document_number": "Ley 27/2014",
                "source_url": "https://www.boe.es/buscar/pdf/2014/BOE-A-2014-12328-consolidado.pdf",
                "categories": ["sociedades", "empresas"],
                "description": "Ley del Impuesto sobre Sociedades",
                "region": "national",
                "language": "es"
            }
        ]
    
    def calculate_file_hash(self, file_path: str) -> str:
        """–í—ã—á–∏—Å–ª—è–µ—Ç SHA256 hash —Ñ–∞–π–ª–∞"""
        sha256_hash = hashlib.sha256()
        with open(file_path, "rb") as f:
            for byte_block in iter(lambda: f.read(4096), b""):
                sha256_hash.update(byte_block)
        return sha256_hash.hexdigest()
    
    def download_pdf(self, url: str, output_path: str) -> Dict:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç PDF —Ñ–∞–π–ª"""
        try:
            print(f"üì• –°–∫–∞—á–∏–≤–∞–µ–º: {output_path}...")
            
            response = requests.get(url, headers=self.headers, timeout=30, stream=True)
            response.raise_for_status()
            
            # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            Path(output_path).parent.mkdir(parents=True, exist_ok=True)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            with open(output_path, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    f.write(chunk)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = Path(output_path).stat().st_size
            
            # –í—ã—á–∏—Å–ª—è–µ–º hash
            file_hash = self.calculate_file_hash(output_path)
            
            print(f"‚úÖ –°–∫–∞—á–∞–Ω: {file_size:,} –±–∞–π—Ç (hash: {file_hash[:16]}...)")
            
            return {
                "success": True,
                "file_path": output_path,
                "file_size_bytes": file_size,
                "file_hash": file_hash,
                "downloaded_at": datetime.now().isoformat()
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return {
                "success": False,
                "error": str(e)
            }
    
    def download_all_documents(self, output_dir: str = "data/pdf_documents"):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"""
        print(f"üìö –°–∫–∞—á–∏–≤–∞–µ–º {len(self.documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
        print(f"{'='*60}\n")
        
        results = []
        
        for doc in self.documents:
            print(f"üìÑ {doc['document_title']}")
            print(f"   –¢–∏–ø: {doc['document_type']}")
            print(f"   –ù–æ–º–µ—Ä: {doc['document_number']}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            filename = f"{doc['document_number'].replace('/', '_').replace(' ', '_')}.pdf"
            output_path = f"{output_dir}/{filename}"
            
            # –°–∫–∞—á–∏–≤–∞–µ–º
            download_result = self.download_pdf(doc['source_url'], output_path)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            result = {**doc, **download_result}
            results.append(result)
            
            print()
        
        return results
    
    def save_metadata(self, results: List[Dict], output_file: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        data = {
            "collected_at": datetime.now().isoformat(),
            "total_documents": len(results),
            "successful_downloads": sum(1 for r in results if r.get('success')),
            "failed_downloads": sum(1 for r in results if not r.get('success')),
            "documents": results
        }
        
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        print(f"üíæ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
    
    def analyze_documents(self, results: List[Dict]):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∫–∞—á–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"""
        print(f"\n{'='*60}")
        print("–ê–ù–ê–õ–ò–ó PDF –î–û–ö–£–ú–ï–ù–¢–û–í")
        print(f"{'='*60}")
        
        successful = [r for r in results if r.get('success')]
        failed = [r for r in results if not r.get('success')]
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(results)}")
        print(f"  –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: {len(successful)}")
        print(f"  –û—à–∏–±–æ–∫: {len(failed)}")
        
        if successful:
            total_size = sum(r.get('file_size_bytes', 0) for r in successful)
            print(f"  –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size:,} –±–∞–π—Ç ({total_size / 1024 / 1024:.2f} MB)")
        
        # –¢–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        doc_types = {}
        for doc in results:
            doc_type = doc.get('document_type', 'unknown')
            doc_types[doc_type] = doc_types.get(doc_type, 0) + 1
        
        print(f"\nüìã –¢–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:")
        for doc_type, count in sorted(doc_types.items()):
            print(f"  - {doc_type}: {count}")
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
        all_categories = set()
        for doc in results:
            all_categories.update(doc.get('categories', []))
        
        print(f"\nüè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ({len(all_categories)}):")
        for category in sorted(all_categories):
            count = sum(1 for d in results if category in d.get('categories', []))
            print(f"  - {category}: {count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        # –î–µ—Ç–∞–ª–∏ —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
        if successful:
            print(f"\nüìÑ –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:")
            for doc in successful:
                print(f"\n  ‚Ä¢ {doc['document_title']}")
                print(f"    –§–∞–π–ª: {doc['file_path']}")
                print(f"    –†–∞–∑–º–µ—Ä: {doc['file_size_bytes']:,} –±–∞–π—Ç")
                print(f"    Hash: {doc['file_hash'][:32]}...")
        
        # –û—à–∏–±–∫–∏
        if failed:
            print(f"\n‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏:")
            for doc in failed:
                print(f"\n  ‚Ä¢ {doc['document_title']}")
                print(f"    –û—à–∏–±–∫–∞: {doc.get('error', 'Unknown')}")


def main():
    import argparse
    
    parser = argparse.ArgumentParser(description='–°–∫–∞—á–∏–≤–∞–Ω–∏–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤')
    parser.add_argument('--output-dir', default='data/pdf_documents', help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è PDF')
    parser.add_argument('--metadata', default='data/pdf_metadata.json', help='–§–∞–π–ª –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö')
    
    args = parser.parse_args()
    
    downloader = PDFDownloader()
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
    results = downloader.download_all_documents(args.output_dir)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
    downloader.analyze_documents(results)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    import os
    os.makedirs(os.path.dirname(args.metadata), exist_ok=True)
    downloader.save_metadata(results, args.metadata)


if __name__ == "__main__":
    main()

