#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–æ—Ä–º AEAT
"""

import os
import sys
import requests
from pathlib import Path
from urllib.parse import urlparse
import time

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

from app.config.settings import Settings


class AEATFormsDownloader:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–æ—Ä–º AEAT"""
    
    def __init__(self):
        self.settings = Settings()
        self.download_dir = Path("data/aeat_forms")
        self.download_dir.mkdir(parents=True, exist_ok=True)
        
        # –°–ø–∏—Å–æ–∫ —Ñ–æ—Ä–º –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        self.forms = [
            {
                "name": "Modelo_303_IVA",
                "url": "https://sede.agenciatributaria.gob.es/static_files/Sede/Procedimientos_ayuda/Modelos/Modelos_2024/303/303_2024.pdf",
                "type": "pdf",
                "description": "Modelo 303 - Declaraci√≥n trimestral del IVA"
            },
            {
                "name": "Modelo_111_Retenciones",
                "url": "https://sede.agenciatributaria.gob.es/static_files/Sede/Procedimientos_ayuda/Modelos/Modelos_2024/111/111_2024.pdf",
                "type": "pdf",
                "description": "Modelo 111 - Retenciones e ingresos a cuenta"
            },
            {
                "name": "Modelo_130_IRPF_Autonomos",
                "url": "https://sede.agenciatributaria.gob.es/static_files/Sede/Procedimientos_ayuda/Modelos/Modelos_2024/130/130_2024.pdf",
                "type": "pdf",
                "description": "Modelo 130 - IRPF para aut√≥nomos (estimaci√≥n directa)"
            },
            {
                "name": "Modelo_131_IRPF_Autonomos",
                "url": "https://sede.agenciatributaria.gob.es/static_files/Sede/Procedimientos_ayuda/Modelos/Modelos_2024/131/131_2024.pdf",
                "type": "pdf",
                "description": "Modelo 131 - IRPF para aut√≥nomos (estimaci√≥n objetiva)"
            },
            {
                "name": "Modelo_036_Alta_Autonomo",
                "url": "https://sede.agenciatributaria.gob.es/static_files/Sede/Procedimientos_ayuda/Modelos/Modelos_2024/036/036_2024.pdf",
                "type": "pdf",
                "description": "Modelo 036 - Alta como aut√≥nomo"
            },
            {
                "name": "Modelo_037_Alta_Autonomo_Simplificado",
                "url": "https://sede.agenciatributaria.gob.es/static_files/Sede/Procedimientos_ayuda/Modelos/Modelos_2024/037/037_2024.pdf",
                "type": "pdf",
                "description": "Modelo 037 - Alta como aut√≥nomo (simplificado)"
            }
        ]
        
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })
    
    def download_form(self, form_info: dict) -> bool:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –æ–¥–Ω—É —Ñ–æ—Ä–º—É"""
        try:
            print(f"\nüìÑ –°–∫–∞—á–∏–≤–∞–µ–º: {form_info['name']}")
            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {form_info['description']}")
            print(f"   URL: {form_info['url']}")
            
            # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            file_path = self.download_dir / f"{form_info['name']}.pdf"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–∫–∞—á–∞–Ω –ª–∏ —É–∂–µ
            if file_path.exists():
                print(f"   ‚ö†Ô∏è  –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}")
                return True
            
            # –°–∫–∞—á–∏–≤–∞–µ–º
            response = self.session.get(form_info['url'], timeout=30)
            response.raise_for_status()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ PDF
            with open(file_path, 'wb') as f:
                f.write(response.content)
            
            print(f"   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {file_path}")
            print(f"   üìä –†–∞–∑–º–µ—Ä: {len(response.content)} –±–∞–π—Ç")
            
            return True
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
            return False
    
    def download_all(self) -> None:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤—Å–µ —Ñ–æ—Ä–º—ã"""
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º AEAT")
        print("=" * 60)
        
        success_count = 0
        total_count = len(self.forms)
        
        for i, form in enumerate(self.forms, 1):
            print(f"\n[{i}/{total_count}]", end=" ")
            
            if self.download_form(form):
                success_count += 1
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            if i < total_count:
                time.sleep(2)
        
        print("\n" + "=" * 60)
        print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"   –£—Å–ø–µ—à–Ω–æ: {success_count}/{total_count}")
        print(f"   –ü–∞–ø–∫–∞: {self.download_dir.absolute()}")
        
        if success_count == total_count:
            print("üéâ –í—Å–µ —Ñ–æ—Ä–º—ã —Å–∫–∞—á–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        else:
            print(f"‚ö†Ô∏è  {total_count - success_count} —Ñ–æ—Ä–º –Ω–µ —Å–∫–∞—á–∞–Ω—ã")
    
    def list_downloaded(self) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        print("\nüìÅ –°–∫–∞—á–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        print("-" * 40)
        
        if not self.download_dir.exists():
            print("   –ü–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        
        files = list(self.download_dir.glob("*.pdf"))
        if not files:
            print("   PDF —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        for file_path in sorted(files):
            size = file_path.stat().st_size
            size_mb = size / 1024 / 1024
            print(f"   üìÑ {file_path.name}")
            print(f"      –†–∞–∑–º–µ—Ä: {size_mb:.2f} MB")
            print(f"      –ü—É—Ç—å: {file_path}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    downloader = AEATFormsDownloader()
    
    print("üîç TuExpertoFiscal NAIL - –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º AEAT")
    print("=" * 60)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ä–º
    print("\nüìã –§–æ—Ä–º—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:")
    for i, form in enumerate(downloader.forms, 1):
        print(f"   {i}. {form['name']} - {form['description']}")
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –≤—Å–µ
    downloader.download_all()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    downloader.list_downloaded()


if __name__ == "__main__":
    main()
