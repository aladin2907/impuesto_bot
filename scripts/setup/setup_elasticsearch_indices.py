#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ –≤ Elasticsearch
–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç mappings –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

from elasticsearch import Elasticsearch
from app.config.settings import Settings


class ElasticsearchSetup:
    def __init__(self):
        self.settings = Settings()
        self.client = self._connect()
    
    def _connect(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Elasticsearch"""
        try:
            if self.settings.ELASTIC_CLOUD_ID:
                client = Elasticsearch(
                    cloud_id=self.settings.ELASTIC_CLOUD_ID,
                    api_key=self.settings.ELASTIC_API_KEY
                )
            else:
                print("‚ùå ELASTIC_CLOUD_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")
                sys.exit(1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if client.ping():
                print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Elasticsearch —É—Å–ø–µ—à–Ω–æ!")
                info = client.info()
                print(f"   –í–µ—Ä—Å–∏—è: {info['version']['number']}")
                print(f"   –ö–ª–∞—Å—Ç–µ—Ä: {info['cluster_name']}")
                return client
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Elasticsearch")
                sys.exit(1)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            sys.exit(1)
    
    def create_telegram_threads_index(self):
        """–°–æ–∑–¥–∞—ë—Ç –∏–Ω–¥–µ–∫—Å –¥–ª—è Telegram —Ç—Ä–µ–¥–æ–≤"""
        index_name = "telegram_threads"
        
        print(f"\nüìã –°–æ–∑–¥–∞—ë–º –∏–Ω–¥–µ–∫—Å: {index_name}")
        
        mapping = {
            "settings": {
                "number_of_shards": 1,
                "number_of_replicas": 1,
                "analysis": {
                    "analyzer": {
                        "russian_english": {
                            "type": "custom",
                            "tokenizer": "standard",
                            "filter": ["lowercase", "russian_stop", "english_stop"]
                        }
                    },
                    "filter": {
                        "russian_stop": {
                            "type": "stop",
                            "stopwords": "_russian_"
                        },
                        "english_stop": {
                            "type": "stop",
                            "stopwords": "_english_"
                        }
                    }
                }
            },
            "mappings": {
                "properties": {
                    "supabase_id": {"type": "keyword"},
                    "thread_id": {"type": "long"},
                    "group_name": {"type": "keyword"},
                    
                    "content": {
                        "type": "text",
                        "analyzer": "russian_english",
                        "fields": {
                            "keyword": {"type": "keyword"},
                            "russian": {
                                "type": "text",
                                "analyzer": "russian"
                            },
                            "english": {
                                "type": "text",
                                "analyzer": "english"
                            }
                        }
                    },
                    
                    "first_message": {
                        "type": "text",
                        "analyzer": "russian_english"
                    },
                    "last_message": {
                        "type": "text",
                        "analyzer": "russian_english"
                    },
                    
                    "message_count": {"type": "integer"},
                    "max_depth": {"type": "integer"},
                    
                    "topics": {"type": "keyword"},
                    "keywords": {"type": "keyword"},
                    "tax_related": {"type": "boolean"},
                    "visa_related": {"type": "boolean"},
                    "business_related": {"type": "boolean"},
                    
                    "quality_score": {"type": "float"},
                    "first_message_date": {"type": "date"},
                    "last_updated": {"type": "date"},
                    
                    "indexed_at": {"type": "date"}
                }
            }
        }
        
        try:
            if self.client.indices.exists(index=index_name):
                print(f"   ‚ö†Ô∏è  –ò–Ω–¥–µ–∫—Å {index_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                response = input("   –£–¥–∞–ª–∏—Ç—å –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å? (y/N): ")
                if response.lower() == 'y':
                    self.client.indices.delete(index=index_name)
                    print(f"   üóëÔ∏è  –ò–Ω–¥–µ–∫—Å {index_name} —É–¥–∞–ª—ë–Ω")
                else:
                    print(f"   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {index_name}")
                    return
            
            self.client.indices.create(index=index_name, body=mapping)
            print(f"   ‚úÖ –ò–Ω–¥–µ–∫—Å {index_name} —Å–æ–∑–¥–∞–Ω!")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    def create_pdf_documents_index(self):
        """–°–æ–∑–¥–∞—ë—Ç –∏–Ω–¥–µ–∫—Å –¥–ª—è PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (—á–∞–Ω–∫–∏)"""
        index_name = "pdf_documents"
        
        print(f"\nüìã –°–æ–∑–¥–∞—ë–º –∏–Ω–¥–µ–∫—Å: {index_name}")
        
        mapping = {
            "settings": {
                "number_of_shards": 1,
                "number_of_replicas": 1
            },
            "mappings": {
                "properties": {
                    "supabase_id": {"type": "keyword"},
                    "document_id": {"type": "keyword"},
                    "chunk_id": {"type": "keyword"},
                    
                    "content": {
                        "type": "text",
                        "analyzer": "spanish",
                        "fields": {
                            "exact": {
                                "type": "text",
                                "analyzer": "standard"
                            }
                        }
                    },
                    
                    "document_title": {"type": "text", "analyzer": "spanish"},
                    "document_type": {"type": "keyword"},
                    "document_number": {"type": "keyword"},
                    
                    "chunk_index": {"type": "integer"},
                    "page_number": {"type": "integer"},
                    
                    "categories": {"type": "keyword"},
                    "region": {"type": "keyword"},
                    "publication_date": {"type": "date"},
                    
                    "indexed_at": {"type": "date"}
                }
            }
        }
        
        try:
            if self.client.indices.exists(index=index_name):
                print(f"   ‚ö†Ô∏è  –ò–Ω–¥–µ–∫—Å {index_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                response = input("   –£–¥–∞–ª–∏—Ç—å –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å? (y/N): ")
                if response.lower() == 'y':
                    self.client.indices.delete(index=index_name)
                    print(f"   üóëÔ∏è  –ò–Ω–¥–µ–∫—Å {index_name} —É–¥–∞–ª—ë–Ω")
                else:
                    print(f"   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {index_name}")
                    return
            
            self.client.indices.create(index=index_name, body=mapping)
            print(f"   ‚úÖ –ò–Ω–¥–µ–∫—Å {index_name} —Å–æ–∑–¥–∞–Ω!")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    def create_news_articles_index(self):
        """–°–æ–∑–¥–∞—ë—Ç –∏–Ω–¥–µ–∫—Å –¥–ª—è –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π"""
        index_name = "news_articles"
        
        print(f"\nüìã –°–æ–∑–¥–∞—ë–º –∏–Ω–¥–µ–∫—Å: {index_name}")
        
        mapping = {
            "settings": {
                "number_of_shards": 1,
                "number_of_replicas": 1
            },
            "mappings": {
                "properties": {
                    "supabase_id": {"type": "keyword"},
                    "article_url": {"type": "keyword"},
                    
                    "title": {
                        "type": "text",
                        "analyzer": "spanish",
                        "fields": {
                            "exact": {"type": "keyword"}
                        }
                    },
                    "content": {"type": "text", "analyzer": "spanish"},
                    "summary": {"type": "text", "analyzer": "spanish"},
                    
                    "news_source": {"type": "keyword"},
                    "author": {"type": "keyword"},
                    
                    "categories": {"type": "keyword"},
                    "keywords": {"type": "keyword"},
                    "tax_related": {"type": "boolean"},
                    
                    "published_at": {"type": "date"},
                    "relevance_score": {"type": "float"},
                    
                    "indexed_at": {"type": "date"}
                }
            }
        }
        
        try:
            if self.client.indices.exists(index=index_name):
                print(f"   ‚ö†Ô∏è  –ò–Ω–¥–µ–∫—Å {index_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                response = input("   –£–¥–∞–ª–∏—Ç—å –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å? (y/N): ")
                if response.lower() == 'y':
                    self.client.indices.delete(index=index_name)
                    print(f"   üóëÔ∏è  –ò–Ω–¥–µ–∫—Å {index_name} —É–¥–∞–ª—ë–Ω")
                else:
                    print(f"   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {index_name}")
                    return
            
            self.client.indices.create(index=index_name, body=mapping)
            print(f"   ‚úÖ –ò–Ω–¥–µ–∫—Å {index_name} —Å–æ–∑–¥–∞–Ω!")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    def create_calendar_deadlines_index(self):
        """–°–æ–∑–¥–∞—ë—Ç –∏–Ω–¥–µ–∫—Å –¥–ª—è –Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        index_name = "calendar_deadlines"
        
        print(f"\nüìã –°–æ–∑–¥–∞—ë–º –∏–Ω–¥–µ–∫—Å: {index_name}")
        
        mapping = {
            "settings": {
                "number_of_shards": 1,
                "number_of_replicas": 1
            },
            "mappings": {
                "properties": {
                    "supabase_id": {"type": "keyword"},
                    
                    "description": {"type": "text", "analyzer": "spanish"},
                    
                    "deadline_date": {"type": "date"},
                    "year": {"type": "integer"},
                    "quarter": {"type": "keyword"},
                    
                    "tax_type": {"type": "keyword"},
                    "tax_model": {"type": "keyword"},
                    "applies_to": {"type": "keyword"},
                    
                    "indexed_at": {"type": "date"}
                }
            }
        }
        
        try:
            if self.client.indices.exists(index=index_name):
                print(f"   ‚ö†Ô∏è  –ò–Ω–¥–µ–∫—Å {index_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                response = input("   –£–¥–∞–ª–∏—Ç—å –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å? (y/N): ")
                if response.lower() == 'y':
                    self.client.indices.delete(index=index_name)
                    print(f"   üóëÔ∏è  –ò–Ω–¥–µ–∫—Å {index_name} —É–¥–∞–ª—ë–Ω")
                else:
                    print(f"   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {index_name}")
                    return
            
            self.client.indices.create(index=index_name, body=mapping)
            print(f"   ‚úÖ –ò–Ω–¥–µ–∫—Å {index_name} —Å–æ–∑–¥–∞–Ω!")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    def list_indices(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤"""
        print(f"\nüìä –°–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤:")
        
        indices = self.client.indices.get_alias(index="*")
        
        for index_name in sorted(indices.keys()):
            if not index_name.startswith('.'):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
                stats = self.client.indices.stats(index=index_name)
                doc_count = stats['_all']['primaries']['docs']['count']
                size = stats['_all']['primaries']['store']['size_in_bytes']
                size_mb = size / 1024 / 1024
                
                print(f"   ‚úÖ {index_name}")
                print(f"      –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {doc_count}")
                print(f"      –†–∞–∑–º–µ—Ä: {size_mb:.2f} MB")
    
    def setup_all(self):
        """–°–æ–∑–¥–∞—ë—Ç –≤—Å–µ –∏–Ω–¥–µ–∫—Å—ã"""
        print("\n" + "="*70)
        print("  –ù–ê–°–¢–†–û–ô–ö–ê –ò–ù–î–ï–ö–°–û–í ELASTICSEARCH")
        print("="*70)
        
        self.create_telegram_threads_index()
        self.create_pdf_documents_index()
        self.create_news_articles_index()
        self.create_calendar_deadlines_index()
        
        self.list_indices()
        
        print("\n" + "="*70)
        print("‚úÖ –í–°–ï –ò–ù–î–ï–ö–°–´ –°–û–ó–î–ê–ù–´!")
        print("="*70)
        print()


def main():
    setup = ElasticsearchSetup()
    setup.setup_all()


if __name__ == "__main__":
    main()


