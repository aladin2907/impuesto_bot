#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Elasticsearch
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from elasticsearch import Elasticsearch
from app.config.settings import Settings
import traceback
import requests

def test_with_requests():
    """–¢–µ—Å—Ç —á–µ—Ä–µ–∑ requests –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    print("=== –¢–µ—Å—Ç —á–µ—Ä–µ–∑ requests ===")
    
    url = "https://36d0e937f1fd4309a2cb624f5f11bed1.us-central1.gcp.cloud.es.io:443"
    headers = {
        "Authorization": "ApiKey eFA2NXI1a0JUb04tRGFBTzktajQ6NnVSaHNaRmZSTUdNRUd2eWg4eERMUQ=="
    }
    
    try:
        response = requests.get(url, headers=headers, timeout=10)
        print(f"Status: {response.status_code}")
        if response.status_code == 200:
            print("‚úÖ requests —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return True
        else:
            print(f"‚ùå requests failed: {response.text[:200]}")
            return False
    except Exception as e:
        print(f"‚ùå requests error: {e}")
        return False

def test_elasticsearch_client():
    """–¢–µ—Å—Ç —á–µ—Ä–µ–∑ elasticsearch client"""
    print("\n=== –¢–µ—Å—Ç —á–µ—Ä–µ–∑ elasticsearch client ===")
    
    s = Settings()
    print(f"Cloud ID: {s.ELASTIC_CLOUD_ID}")
    print(f"API Key (first 20): {s.ELASTIC_API_KEY[:20] if s.ELASTIC_API_KEY else 'None'}")
    
    # –í–∞—Ä–∏–∞–Ω—Ç 1: cloud_id
    try:
        print("\n--- –í–∞—Ä–∏–∞–Ω—Ç 1: cloud_id ---")
        client = Elasticsearch(
            cloud_id=s.ELASTIC_CLOUD_ID,
            api_key=s.ELASTIC_API_KEY,
            verify_certs=True,
            request_timeout=30
        )
        
        result = client.ping()
        print(f"Ping result: {result}")
        
        if result:
            print("‚úÖ cloud_id —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return client
        else:
            print("‚ùå cloud_id ping failed")
            
    except Exception as e:
        print(f"‚ùå cloud_id error: {e}")
        traceback.print_exc()
    
    # –í–∞—Ä–∏–∞–Ω—Ç 2: –ø—Ä—è–º–æ–π URL
    try:
        print("\n--- –í–∞—Ä–∏–∞–Ω—Ç 2: –ø—Ä—è–º–æ–π URL ---")
        client = Elasticsearch(
            hosts=['https://36d0e937f1fd4309a2cb624f5f11bed1.us-central1.gcp.cloud.es.io:443'],
            api_key='xP65r5kBToN-DaAO9-j4:6uRhsZFfRMGMEGvyh8xDLQ',
            verify_certs=True,
            request_timeout=30
        )
        
        result = client.ping()
        print(f"Ping result: {result}")
        
        if result:
            print("‚úÖ –ø—Ä—è–º–æ–π URL —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return client
        else:
            print("‚ùå –ø—Ä—è–º–æ–π URL ping failed")
            
    except Exception as e:
        print(f"‚ùå –ø—Ä—è–º–æ–π URL error: {e}")
        traceback.print_exc()
    
    # –í–∞—Ä–∏–∞–Ω—Ç 3: –±–µ–∑ SSL –ø—Ä–æ–≤–µ—Ä–∫–∏
    try:
        print("\n--- –í–∞—Ä–∏–∞–Ω—Ç 3: –±–µ–∑ SSL –ø—Ä–æ–≤–µ—Ä–∫–∏ ---")
        client = Elasticsearch(
            cloud_id=s.ELASTIC_CLOUD_ID,
            api_key=s.ELASTIC_API_KEY,
            verify_certs=False,
            ssl_show_warn=False,
            request_timeout=30
        )
        
        result = client.ping()
        print(f"Ping result: {result}")
        
        if result:
            print("‚úÖ –±–µ–∑ SSL —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return client
        else:
            print("‚ùå –±–µ–∑ SSL ping failed")
            
    except Exception as e:
        print(f"‚ùå –±–µ–∑ SSL error: {e}")
        traceback.print_exc()
    
    return None

def main():
    print("üîç –î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Elasticsearch")
    print("=" * 60)
    
    # –°–Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ requests
    requests_works = test_with_requests()
    
    # –ü–æ—Ç–æ–º —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ elasticsearch client
    client = test_elasticsearch_client()
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"requests: {'‚úÖ' if requests_works else '‚ùå'}")
    print(f"elasticsearch client: {'‚úÖ' if client else '‚ùå'}")
    
    if client:
        print("\nüéâ –£—Å–ø–µ—Ö! –ú–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å elasticsearch client")
        try:
            info = client.info()
            print(f"–í–µ—Ä—Å–∏—è: {info['version']['number']}")
            print(f"–ö–ª–∞—Å—Ç–µ—Ä: {info['cluster_name']}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è info: {e}")
    else:
        print("\n‚ö†Ô∏è  elasticsearch client –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º curl/requests")

if __name__ == "__main__":
    main()
