#!/usr/bin/env python3
"""
Elasticsearch —Å–µ—Ä–≤–∏—Å —á–µ—Ä–µ–∑ requests (–æ–±—Ö–æ–¥ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º)
"""

import requests
import json
import base64
import sys
from pathlib import Path
from typing import Dict, List, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent.parent.parent
sys.path.insert(0, str(project_root))

from app.config.settings import Settings


class ElasticsearchService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Elasticsearch —á–µ—Ä–µ–∑ HTTP API"""
    
    def __init__(self):
        self.settings = Settings()
        # Derive base_url from ELASTIC_CLOUD_ID
        self.base_url = self._derive_base_url(self.settings.ELASTIC_CLOUD_ID)
        # Compute Base64 for ApiKey header from id:key in .env
        raw_api_key = (self.settings.ELASTIC_API_KEY or "").strip()
        self.api_key_b64 = base64.b64encode(raw_api_key.encode()).decode() if raw_api_key else ""
        self.headers = {
            "Authorization": f"ApiKey {self.api_key_b64}",
            "Content-Type": "application/json"
        }

    def _derive_base_url(self, cloud_id: str) -> str:
        try:
            if not cloud_id or ":" not in cloud_id:
                raise ValueError("Invalid ELASTIC_CLOUD_ID")
            _, b64 = cloud_id.split(":", 1)
            decoded = base64.b64decode(b64).decode()
            # Format: host$es_id$kibana_id
            parts = decoded.split("$")
            host = parts[0]
            es_id = parts[1]
            return f"https://{es_id}.{host}"
        except Exception:
            # Fallback to known URL if derivation fails
            return "https://36d0e937f1fd4309a2cb624f5f11bed1.us-central1.gcp.cloud.es.io:443"
    
    def ping(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            response = requests.get(self.base_url, headers=self.headers, timeout=10)
            print(f"Ping response: {response.status_code}")
            if response.status_code != 200:
                print(f"Ping error: {response.text[:200]}")
            return response.status_code == 200
        except Exception as e:
            print(f"Ping exception: {e}")
            return False
    
    def info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∞—Å—Ç–µ—Ä–µ"""
        response = requests.get(self.base_url, headers=self.headers, timeout=10)
        response.raise_for_status()
        return response.json()

    def index_exists(self, index_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞"""
        try:
            url = f"{self.base_url}/{index_name}"
            response = requests.head(url, headers=self.headers, timeout=10)
            return response.status_code == 200
        except Exception:
            return False
    
    def create_index(self, index_name: str, mapping: Dict[str, Any]) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞"""
        try:
            url = f"{self.base_url}/{index_name}"
            response = requests.put(url, headers=self.headers, json=mapping, timeout=30)
            
            if response.status_code == 200:
                print(f"‚úÖ –ò–Ω–¥–µ–∫—Å {index_name} —Å–æ–∑–¥–∞–Ω")
                return True
            elif response.status_code == 400 and "already_exists_exception" in response.text:
                print(f"‚ö†Ô∏è  –ò–Ω–¥–µ–∫—Å {index_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ {index_name}: {response.status_code}")
                print(f"   {response.text[:200]}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ {index_name}: {e}")
            return False
    
    def index_document(self, index_name: str, doc_id: str, document: Dict[str, Any]) -> bool:
        """–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        try:
            url = f"{self.base_url}/{index_name}/_doc/{doc_id}"
            response = requests.put(url, headers=self.headers, json=document, timeout=30)
            
            if response.status_code in [200, 201]:
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {doc_id}: {response.status_code}")
                print(f"   {response.text[:200]}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {doc_id}: {e}")
            return False
    
    def bulk_index(self, index_name: str, documents: List[Dict[str, Any]]) -> bool:
        """–ú–∞—Å—Å–æ–≤–∞—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        try:
            url = f"{self.base_url}/_bulk"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º bulk –∑–∞–ø—Ä–æ—Å
            bulk_data = []
            for doc in documents:
                # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
                bulk_data.append({
                    "index": {
                        "_index": index_name,
                        "_id": doc.get("_id", doc.get("id"))
                    }
                })
                # –°–∞–º –¥–æ–∫—É–º–µ–Ω—Ç (—É–±–∏—Ä–∞–µ–º _id –µ—Å–ª–∏ –µ—Å—Ç—å)
                doc_copy = doc.copy()
                doc_copy.pop("_id", None)
                doc_copy.pop("id", None)
                bulk_data.append(doc_copy)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ NDJSON —Ñ–æ—Ä–º–∞—Ç
            ndjson_lines = []
            for item in bulk_data:
                ndjson_lines.append(json.dumps(item))
            
            ndjson_data = "\n".join(ndjson_lines) + "\n"
            
            headers = self.headers.copy()
            headers["Content-Type"] = "application/x-ndjson"
            response = requests.post(
                url,
                headers=headers,
                data=ndjson_data,
                timeout=60
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get("errors"):
                    print(f"‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω—ã: {result['errors']}")
                else:
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ bulk –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {response.status_code}")
                print(f"   {response.text[:200]}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ bulk –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {e}")
            return False
    
    def search(self, index_name: str, query: Dict[str, Any], size: int = 10) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –ø–æ –∏–Ω–¥–µ–∫—Å—É"""
        try:
            url = f"{self.base_url}/{index_name}/_search"
            
            search_body = {
                "query": query,
                "size": size
            }
            
            response = requests.post(url, headers=self.headers, json=search_body, timeout=30)
            response.raise_for_status()
            
            result = response.json()
            hits = result.get("hits", {}).get("hits", [])
            results: List[Dict[str, Any]] = []
            for hit in hits:
                source = hit.get("_source", {})
                out = {
                    "_id": hit.get("_id"),
                    "_score": hit.get("_score"),
                }
                out.update(source)
                results.append(out)
            return results
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            return []
    
    def get_index_stats(self, index_name: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–Ω–¥–µ–∫—Å–∞"""
        try:
            url = f"{self.base_url}/{index_name}/_stats"
            response = requests.get(url, headers=self.headers, timeout=30)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
    
    def list_indices(self) -> List[str]:
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω–¥–µ–∫—Å–æ–≤"""
        try:
            url = f"{self.base_url}/_cat/indices?format=json"
            response = requests.get(url, headers=self.headers, timeout=30)
            response.raise_for_status()
            
            indices = response.json()
            return [idx["index"] for idx in indices if not idx["index"].startswith(".")]
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")
            return []


def main():
    """–¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞"""
    print("üîç –¢–µ—Å—Ç ElasticsearchService")
    print("=" * 50)
    
    es = ElasticsearchService()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if es.ping():
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞—Å—Ç–µ—Ä–µ
        info = es.info()
        print(f"–í–µ—Ä—Å–∏—è: {info['version']['number']}")
        print(f"–ö–ª–∞—Å—Ç–µ—Ä: {info['cluster_name']}")
        
        # –°–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤
        indices = es.list_indices()
        print(f"–ò–Ω–¥–µ–∫—Å—ã: {indices}")
        
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")


if __name__ == "__main__":
    main()
